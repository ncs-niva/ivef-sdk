<?php

// 
//  VoyageData
//
//  VoyageData is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  VoyageData is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by schema2code on Mon Jan 17 11:39:43 2022.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFWaypoint.php";

class VoyageData { 

    var $m_waypoint; // default value is uninitialized
    var $m_waypointPresent;
    var $m_airDraught; // default value is uninitialized
    var $m_airDraughtPresent;
    var $m_id; // default value is uninitialized
    var $m_idPresent;
    var $m_cargoTypeIMO; // default value is uninitialized
    var $m_cargoTypeIMOPresent;
    var $m_contactIdentity; // default value is uninitialized
    var $m_contactIdentityPresent;
    var $m_destCode; // default value is uninitialized
    var $m_destCodePresent;
    var $m_destName; // default value is uninitialized
    var $m_destNamePresent;
    var $m_departCode; // default value is uninitialized
    var $m_departCodePresent;
    var $m_departName; // default value is uninitialized
    var $m_departNamePresent;
    var $m_draught; // default value is uninitialized
    var $m_draughtPresent;
    var $m_ETA; // default value is uninitialized
    var $m_ETAPresent;
    var $m_ATD; // default value is uninitialized
    var $m_ATDPresent;
    var $m_ISPSLevel; // default value is uninitialized
    var $m_ISPSLevelPresent;
    var $m_overSizedLength; // default value is uninitialized
    var $m_overSizedLengthPresent;
    var $m_overSizedWidth; // default value is uninitialized
    var $m_overSizedWidthPresent;
    var $m_personsOnBoard; // default value is uninitialized
    var $m_personsOnBoardPresent;
    var $m_pilots; // default value is uninitialized
    var $m_pilotsPresent;
    var $m_routeBound; // default value is uninitialized
    var $m_routeBoundPresent;
    var $m_sourceId; // default value is uninitialized
    var $m_sourceIdPresent;
    var $m_sourceName; // default value is uninitialized
    var $m_sourceNamePresent;
    var $m_sourceType; // default value is uninitialized
    var $m_sourceTypePresent;
    var $m_tankerStatus; // default value is uninitialized
    var $m_tankerStatusPresent;
    var $m_tugs; // default value is uninitialized
    var $m_tugsPresent;
    var $m_updateTime; // default value is uninitialized
    var $m_updateTimePresent;

    public function VoyageData() {

        date_default_timezone_set('UTC');
        $this->m_waypointPresent = false;
        $this->m_waypoints = array();
        $this->m_airDraughtPresent = false;
        $this->m_idPresent = false;
        $this->m_cargoTypeIMOPresent = false;
        $this->m_contactIdentityPresent = false;
        $this->m_destCodePresent = false;
        $this->m_destNamePresent = false;
        $this->m_departCodePresent = false;
        $this->m_departNamePresent = false;
        $this->m_draughtPresent = false;
        $this->m_ETAPresent = false;
        $this->m_ATDPresent = false;
        $this->m_ISPSLevelPresent = false;
        $this->m_overSizedLengthPresent = false;
        $this->m_overSizedWidthPresent = false;
        $this->m_personsOnBoardPresent = false;
        $this->m_pilotsPresent = false;
        $this->m_routeBoundPresent = false;
        $this->m_sourceIdPresent = false;
        $this->m_sourceNamePresent = false;
        $this->m_sourceTypePresent = false;
        $this->m_tankerStatusPresent = false;
        $this->m_tugsPresent = false;
        $this->m_updateTimePresent = false;
    }

    public function removeWaypoint(Waypoint $val ) {
        if ( count($this->m_waypoints) <= 0) {
            return false; // scalar already at minOccurs
        }
        for($i=0; $i< count($this->m_waypoints); $i++) {
            if($this->m_waypoints[i] == $val) {
                unset($this->m_waypoints[i]);
            }
        }
        return true;
    }

    public function addWaypoint(Waypoint $val ) {

        $this->m_waypoints[] = $val;
        return true;
    }

    public function getWaypointAt($i) {

        return $this->m_waypoints[$i];
    }

    public function countOfWaypoints() {

        return count($this->m_waypoints);
    }

    public function setAirDraught( $val ) {

        if ($val <= 0)
          return false;
        $this->m_airDraughtPresent = true;
        $this->m_airDraught = $val;
        return true;
    }

    public function getAirDraught() {

        return $this->m_airDraught;
    }

    public function hasAirDraught() {

        return $this->m_airDraughtPresent;
    }

    public function setId( $val ) {

        $this->m_idPresent = true;
        $this->m_id = $val;
        return true;
    }

    public function getId() {

        return $this->m_id;
    }

    public function setCargoTypeIMO( $val ) {

        if ( ( $val != 0 ) &&
             ( $val != 1 ) &&
             ( $val != 2 ) &&
             ( $val != 3 ) &&
             ( $val != 4 ) &&
             ( $val != 5 ) )
            return false;
        $this->m_cargoTypeIMOPresent = true;
        $this->m_cargoTypeIMO = $val;
        return true;
    }

    public function getCargoTypeIMO() {

        return $this->m_cargoTypeIMO;
    }

    public function hasCargoTypeIMO() {

        return $this->m_cargoTypeIMOPresent;
    }

    public function setContactIdentity( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 254)
            return false;
        $this->m_contactIdentityPresent = true;
        $this->m_contactIdentity = $val;
        return true;
    }

    public function getContactIdentity() {

        return $this->m_contactIdentity;
    }

    public function hasContactIdentity() {

        return $this->m_contactIdentityPresent;
    }

    public function setDestCode( $val ) {

        if (strlen ($val) < 5)
            return false;
        if (strlen ($val) > 15)
            return false;
        $this->m_destCodePresent = true;
        $this->m_destCode = $val;
        return true;
    }

    public function getDestCode() {

        return $this->m_destCode;
    }

    public function hasDestCode() {

        return $this->m_destCodePresent;
    }

    public function setDestName( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_destNamePresent = true;
        $this->m_destName = $val;
        return true;
    }

    public function getDestName() {

        return $this->m_destName;
    }

    public function hasDestName() {

        return $this->m_destNamePresent;
    }

    public function setDepartCode( $val ) {

        if (strlen ($val) < 5)
            return false;
        if (strlen ($val) > 15)
            return false;
        $this->m_departCodePresent = true;
        $this->m_departCode = $val;
        return true;
    }

    public function getDepartCode() {

        return $this->m_departCode;
    }

    public function hasDepartCode() {

        return $this->m_departCodePresent;
    }

    public function setDepartName( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_departNamePresent = true;
        $this->m_departName = $val;
        return true;
    }

    public function getDepartName() {

        return $this->m_departName;
    }

    public function hasDepartName() {

        return $this->m_departNamePresent;
    }

    public function setDraught( $val ) {

        if ($val <= 0)
          return false;
        $this->m_draughtPresent = true;
        $this->m_draught = $val;
        return true;
    }

    public function getDraught() {

        return $this->m_draught;
    }

    public function hasDraught() {

        return $this->m_draughtPresent;
    }

    public function setETA( $val ) {

        $this->m_ETAPresent = true;
        $this->m_ETA = $val;
        return true;
    }

    public function getETA() {

        return $this->m_ETA;
    }

    public function hasETA() {

        return $this->m_ETAPresent;
    }

    public function setATD( $val ) {

        $this->m_ATDPresent = true;
        $this->m_ATD = $val;
        return true;
    }

    public function getATD() {

        return $this->m_ATD;
    }

    public function hasATD() {

        return $this->m_ATDPresent;
    }

    public function setISPSLevel( $val ) {

        if ( ( $val != 1 ) &&
             ( $val != 2 ) &&
             ( $val != 3 ) )
            return false;
        $this->m_ISPSLevelPresent = true;
        $this->m_ISPSLevel = $val;
        return true;
    }

    public function getISPSLevel() {

        return $this->m_ISPSLevel;
    }

    public function hasISPSLevel() {

        return $this->m_ISPSLevelPresent;
    }

    public function setOverSizedLength( $val ) {

        if ($val <= 0)
          return false;
        $this->m_overSizedLengthPresent = true;
        $this->m_overSizedLength = $val;
        return true;
    }

    public function getOverSizedLength() {

        return $this->m_overSizedLength;
    }

    public function hasOverSizedLength() {

        return $this->m_overSizedLengthPresent;
    }

    public function setOverSizedWidth( $val ) {

        if ($val <= 0)
          return false;
        $this->m_overSizedWidthPresent = true;
        $this->m_overSizedWidth = $val;
        return true;
    }

    public function getOverSizedWidth() {

        return $this->m_overSizedWidth;
    }

    public function hasOverSizedWidth() {

        return $this->m_overSizedWidthPresent;
    }

    public function setPersonsOnBoard( $val ) {

        if ($val <= 0)
          return false;
        $this->m_personsOnBoardPresent = true;
        $this->m_personsOnBoard = $val;
        return true;
    }

    public function getPersonsOnBoard() {

        return $this->m_personsOnBoard;
    }

    public function hasPersonsOnBoard() {

        return $this->m_personsOnBoardPresent;
    }

    public function setPilots( $val ) {

        if ($val <= 0)
          return false;
        $this->m_pilotsPresent = true;
        $this->m_pilots = $val;
        return true;
    }

    public function getPilots() {

        return $this->m_pilots;
    }

    public function hasPilots() {

        return $this->m_pilotsPresent;
    }

    public function setRouteBound( $val ) {

        $this->m_routeBoundPresent = true;
        $this->m_routeBound = $val;
        return true;
    }

    public function getRouteBound() {

        return $this->m_routeBound;
    }

    public function hasRouteBound() {

        return $this->m_routeBoundPresent;
    }

    public function setSourceId( $val ) {

        if (strlen ($val) < 5)
            return false;
        if (strlen ($val) > 15)
            return false;
        $this->m_sourceIdPresent = true;
        $this->m_sourceId = $val;
        return true;
    }

    public function getSourceId() {

        return $this->m_sourceId;
    }

    public function hasSourceId() {

        return $this->m_sourceIdPresent;
    }

    public function setSourceName( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_sourceNamePresent = true;
        $this->m_sourceName = $val;
        return true;
    }

    public function getSourceName() {

        return $this->m_sourceName;
    }

    public function setSourceType( $val ) {

        if ( ( $val != 1 ) &&
             ( $val != 2 ) &&
             ( $val != 3 ) &&
             ( $val != 4 ) &&
             ( $val != 5 ) )
            return false;
        $this->m_sourceTypePresent = true;
        $this->m_sourceType = $val;
        return true;
    }

    public function getSourceType() {

        return $this->m_sourceType;
    }

    public function setTankerStatus( $val ) {

        if ( ( $val != 0 ) &&
             ( $val != 1 ) &&
             ( $val != 2 ) )
            return false;
        $this->m_tankerStatusPresent = true;
        $this->m_tankerStatus = $val;
        return true;
    }

    public function getTankerStatus() {

        return $this->m_tankerStatus;
    }

    public function hasTankerStatus() {

        return $this->m_tankerStatusPresent;
    }

    public function setTugs( $val ) {

        $this->m_tugsPresent = true;
        $this->m_tugs = $val;
        return true;
    }

    public function getTugs() {

        return $this->m_tugs;
    }

    public function hasTugs() {

        return $this->m_tugsPresent;
    }

    public function setUpdateTime( $val ) {

        $this->m_updateTimePresent = true;
        $this->m_updateTime = $val;
        return true;
    }

    public function getUpdateTime() {

        return $this->m_updateTime;
    }

    public function toXML($outputNamespace = true) {

        if ($outputNamespace)
        {
            $rootNodeTag  = "<VoyageData";
            $rootNodeTag .= " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"";
            $rootNodeTag .= " xmlns=\"http://www.iala-to-be-confirmed.org/XMLSchema/IVEF/0.2.5\"";
            $rootNodeTag .= "></VoyageData>";
        }
        else
            $rootNodeTag = "<VoyageData></VoyageData>";
        $xml = new SimpleXMLElement($rootNodeTag);

        if ( $this->hasAirDraught() ) {
            $xml->addAttribute('AirDraught', number_format($this->m_airDraught, 2));
        }
        if ( $this->m_idPresent ) {
            $xml->addAttribute('Id', $this->m_id);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasCargoTypeIMO() ) {
            $xml->addAttribute('CargoTypeIMO', $this->m_cargoTypeIMO);
        }
        if ( $this->hasContactIdentity() ) {
            $xml->addAttribute('ContactIdentity', $this->m_contactIdentity);
        }
        if ( $this->hasDestCode() ) {
            $xml->addAttribute('DestCode', $this->m_destCode);
        }
        if ( $this->hasDestName() ) {
            $xml->addAttribute('DestName', $this->m_destName);
        }
        if ( $this->hasDepartCode() ) {
            $xml->addAttribute('DepartCode', $this->m_departCode);
        }
        if ( $this->hasDepartName() ) {
            $xml->addAttribute('DepartName', $this->m_departName);
        }
        if ( $this->hasDraught() ) {
            $xml->addAttribute('Draught', number_format($this->m_draught, 2));
        }
        if ( $this->hasETA() ) {
            $xml->addAttribute('ETA', $this->m_ETA);
        }
        if ( $this->hasATD() ) {
            $xml->addAttribute('ATD', $this->m_ATD);
        }
        if ( $this->hasISPSLevel() ) {
            $xml->addAttribute('ISPSLevel', number_format($this->m_ISPSLevel, 6));
        }
        if ( $this->hasOverSizedLength() ) {
            $xml->addAttribute('OverSizedLength', number_format($this->m_overSizedLength, 1));
        }
        if ( $this->hasOverSizedWidth() ) {
            $xml->addAttribute('OverSizedWidth', number_format($this->m_overSizedWidth, 1));
        }
        if ( $this->hasPersonsOnBoard() ) {
            $xml->addAttribute('PersonsOnBoard', $this->m_personsOnBoard);
        }
        if ( $this->hasPilots() ) {
            $xml->addAttribute('Pilots', number_format($this->m_pilots, 6));
        }
        if ( $this->hasRouteBound() ) {
            $xml->addAttribute('RouteBound', $this->m_routeBound);
        }
        if ( $this->hasSourceId() ) {
            $xml->addAttribute('SourceId', $this->m_sourceId);
        }
        if ( $this->m_sourceNamePresent ) {
            $xml->addAttribute('SourceName', $this->m_sourceName);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_sourceTypePresent ) {
            $xml->addAttribute('SourceType', $this->m_sourceType);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasTankerStatus() ) {
            $xml->addAttribute('TankerStatus', $this->m_tankerStatus);
        }
        if ( $this->hasTugs() ) {
            $xml->addAttribute('Tugs', $this->m_tugs);
        }
        if ( $this->m_updateTimePresent ) {
            $xml->addAttribute('UpdateTime', $this->m_updateTime);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( count($this->m_waypoints) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_waypoints as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML(false);
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        return $xml->asXML();
    }

    public function toString() {

    	return $this->toStringWithLead("");
    }

    public function toStringWithLead( $lead ) {

        $str = $lead . "VoyageData\n";

        if ( $this->hasAirDraught() ) {
            $str .= $lead . "    AirDraught = " . number_format($this->m_airDraught, 2) . "\n";
        }
        $str .= $lead . "    Id = " . $this->m_id . "\n";
        if ( $this->hasCargoTypeIMO() ) {
            $str .= $lead . "    CargoTypeIMO = " . $this->m_cargoTypeIMO . "\n";
        }
        if ( $this->hasContactIdentity() ) {
            $str .= $lead . "    ContactIdentity = " . $this->m_contactIdentity . "\n";
        }
        if ( $this->hasDestCode() ) {
            $str .= $lead . "    DestCode = " . $this->m_destCode . "\n";
        }
        if ( $this->hasDestName() ) {
            $str .= $lead . "    DestName = " . $this->m_destName . "\n";
        }
        if ( $this->hasDepartCode() ) {
            $str .= $lead . "    DepartCode = " . $this->m_departCode . "\n";
        }
        if ( $this->hasDepartName() ) {
            $str .= $lead . "    DepartName = " . $this->m_departName . "\n";
        }
        if ( $this->hasDraught() ) {
            $str .= $lead . "    Draught = " . number_format($this->m_draught, 2) . "\n";
        }
        if ( $this->hasETA() ) {
            $str .= $lead . "    ETA = " . $this->m_ETA . "\n";
        }
        if ( $this->hasATD() ) {
            $str .= $lead . "    ATD = " . $this->m_ATD . "\n";
        }
        if ( $this->hasISPSLevel() ) {
            $str .= $lead . "    ISPSLevel = " . number_format($this->m_ISPSLevel, 6) . "\n";
        }
        if ( $this->hasOverSizedLength() ) {
            $str .= $lead . "    OverSizedLength = " . number_format($this->m_overSizedLength, 1) . "\n";
        }
        if ( $this->hasOverSizedWidth() ) {
            $str .= $lead . "    OverSizedWidth = " . number_format($this->m_overSizedWidth, 1) . "\n";
        }
        if ( $this->hasPersonsOnBoard() ) {
            $str .= $lead . "    PersonsOnBoard = " . $this->m_personsOnBoard . "\n";
        }
        if ( $this->hasPilots() ) {
            $str .= $lead . "    Pilots = " . number_format($this->m_pilots, 6) . "\n";
        }
        if ( $this->hasRouteBound() ) {
            $str .= $lead . "    RouteBound = " . $this->m_routeBound . "\n";
        }
        if ( $this->hasSourceId() ) {
            $str .= $lead . "    SourceId = " . $this->m_sourceId . "\n";
        }
        $str .= $lead . "    SourceName = " . $this->m_sourceName . "\n";
        $str .= $lead . "    SourceType = " . $this->m_sourceType . "\n";
        if ( $this->hasTankerStatus() ) {
            $str .= $lead . "    TankerStatus = " . $this->m_tankerStatus . "\n";
        }
        if ( $this->hasTugs() ) {
            $str .= $lead . "    Tugs = " . $this->m_tugs . "\n";
        }
        $str .= $lead . "    UpdateTime = " . $this->m_updateTime . "\n";
        foreach($this->m_waypoints as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }

        return $str;
    }
}
?>
