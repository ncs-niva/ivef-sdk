<?php

// 
//  Identifier
//
//  Identifier is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  Identifier is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by schema2code on Mon Jan 17 11:39:43 2022.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFOtherId.php";
require_once "IVEFOtherName.php";

class Identifier { 

    var $m_otherId; // default value is uninitialized
    var $m_otherIdPresent;
    var $m_otherName; // default value is uninitialized
    var $m_otherNamePresent;
    var $m_callsign; // default value is uninitialized
    var $m_callsignPresent;
    var $m_IMO; // default value is uninitialized
    var $m_IMOPresent;
    var $m_name; // default value is uninitialized
    var $m_namePresent;
    var $m_formerName; // default value is uninitialized
    var $m_formerNamePresent;
    var $m_flag; // default value is uninitialized
    var $m_flagPresent;
    var $m_owner; // default value is uninitialized
    var $m_ownerPresent;
    var $m_MMSI; // default value is uninitialized
    var $m_MMSIPresent;
    var $m_LRIT; // default value is uninitialized
    var $m_LRITPresent;

    public function Identifier() {

        date_default_timezone_set('UTC');
        $this->m_otherIdPresent = false;
        $this->m_otherIds = array();
        $this->m_otherNamePresent = false;
        $this->m_otherNames = array();
        $this->m_callsignPresent = false;
        $this->m_IMOPresent = false;
        $this->m_namePresent = false;
        $this->m_formerNamePresent = false;
        $this->m_flagPresent = false;
        $this->m_ownerPresent = false;
        $this->m_MMSIPresent = false;
        $this->m_LRITPresent = false;
    }

    public function removeOtherId(OtherId $val ) {
        if ( count($this->m_otherIds) <= 0) {
            return false; // scalar already at minOccurs
        }
        for($i=0; $i< count($this->m_otherIds); $i++) {
            if($this->m_otherIds[i] == $val) {
                unset($this->m_otherIds[i]);
            }
        }
        return true;
    }

    public function addOtherId(OtherId $val ) {

        $this->m_otherIds[] = $val;
        return true;
    }

    public function getOtherIdAt($i) {

        return $this->m_otherIds[$i];
    }

    public function countOfOtherIds() {

        return count($this->m_otherIds);
    }

    public function removeOtherName(OtherName $val ) {
        if ( count($this->m_otherNames) <= 0) {
            return false; // scalar already at minOccurs
        }
        for($i=0; $i< count($this->m_otherNames); $i++) {
            if($this->m_otherNames[i] == $val) {
                unset($this->m_otherNames[i]);
            }
        }
        return true;
    }

    public function addOtherName(OtherName $val ) {

        $this->m_otherNames[] = $val;
        return true;
    }

    public function getOtherNameAt($i) {

        return $this->m_otherNames[$i];
    }

    public function countOfOtherNames() {

        return count($this->m_otherNames);
    }

    public function setCallsign( $val ) {

        if (strlen ($val) < 0)
            return false;
        if (strlen ($val) > 9)
            return false;
        $this->m_callsignPresent = true;
        $this->m_callsign = $val;
        return true;
    }

    public function getCallsign() {

        return $this->m_callsign;
    }

    public function hasCallsign() {

        return $this->m_callsignPresent;
    }

    public function setIMO( $val ) {

        $this->m_IMOPresent = true;
        $this->m_IMO = $val;
        return true;
    }

    public function getIMO() {

        return $this->m_IMO;
    }

    public function hasIMO() {

        return $this->m_IMOPresent;
    }

    public function setName( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_namePresent = true;
        $this->m_name = $val;
        return true;
    }

    public function getName() {

        return $this->m_name;
    }

    public function hasName() {

        return $this->m_namePresent;
    }

    public function setFormerName( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_formerNamePresent = true;
        $this->m_formerName = $val;
        return true;
    }

    public function getFormerName() {

        return $this->m_formerName;
    }

    public function hasFormerName() {

        return $this->m_formerNamePresent;
    }

    public function setFlag( $val ) {

        if (strlen ($val) < 2)
            return false;
        if (strlen ($val) > 2)
            return false;
        $this->m_flagPresent = true;
        $this->m_flag = $val;
        return true;
    }

    public function getFlag() {

        return $this->m_flag;
    }

    public function hasFlag() {

        return $this->m_flagPresent;
    }

    public function setOwner( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_ownerPresent = true;
        $this->m_owner = $val;
        return true;
    }

    public function getOwner() {

        return $this->m_owner;
    }

    public function hasOwner() {

        return $this->m_ownerPresent;
    }

    public function setMMSI( $val ) {

        $this->m_MMSIPresent = true;
        $this->m_MMSI = $val;
        return true;
    }

    public function getMMSI() {

        return $this->m_MMSI;
    }

    public function hasMMSI() {

        return $this->m_MMSIPresent;
    }

    public function setLRIT( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_LRITPresent = true;
        $this->m_LRIT = $val;
        return true;
    }

    public function getLRIT() {

        return $this->m_LRIT;
    }

    public function hasLRIT() {

        return $this->m_LRITPresent;
    }

    public function toXML($outputNamespace = true) {

        if ($outputNamespace)
        {
            $rootNodeTag  = "<Identifier";
            $rootNodeTag .= " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"";
            $rootNodeTag .= " xmlns=\"http://www.iala-to-be-confirmed.org/XMLSchema/IVEF/0.2.5\"";
            $rootNodeTag .= "></Identifier>";
        }
        else
            $rootNodeTag = "<Identifier></Identifier>";
        $xml = new SimpleXMLElement($rootNodeTag);

        if ( $this->hasCallsign() ) {
            $xml->addAttribute('Callsign', $this->m_callsign);
        }
        if ( $this->hasIMO() ) {
            $xml->addAttribute('IMO', $this->m_IMO);
        }
        if ( $this->hasName() ) {
            $xml->addAttribute('Name', $this->m_name);
        }
        if ( $this->hasFormerName() ) {
            $xml->addAttribute('FormerName', $this->m_formerName);
        }
        if ( $this->hasFlag() ) {
            $xml->addAttribute('Flag', $this->m_flag);
        }
        if ( $this->hasOwner() ) {
            $xml->addAttribute('Owner', $this->m_owner);
        }
        if ( $this->hasMMSI() ) {
            $xml->addAttribute('MMSI', $this->m_MMSI);
        }
        if ( $this->hasLRIT() ) {
            $xml->addAttribute('LRIT', $this->m_LRIT);
        }
        if ( count($this->m_otherIds) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_otherIds as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML(false);
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        if ( count($this->m_otherNames) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_otherNames as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML(false);
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        return $xml->asXML();
    }

    public function toString() {

    	return $this->toStringWithLead("");
    }

    public function toStringWithLead( $lead ) {

        $str = $lead . "Identifier\n";

        if ( $this->hasCallsign() ) {
            $str .= $lead . "    Callsign = " . $this->m_callsign . "\n";
        }
        if ( $this->hasIMO() ) {
            $str .= $lead . "    IMO = " . $this->m_IMO . "\n";
        }
        if ( $this->hasName() ) {
            $str .= $lead . "    Name = " . $this->m_name . "\n";
        }
        if ( $this->hasFormerName() ) {
            $str .= $lead . "    FormerName = " . $this->m_formerName . "\n";
        }
        if ( $this->hasFlag() ) {
            $str .= $lead . "    Flag = " . $this->m_flag . "\n";
        }
        if ( $this->hasOwner() ) {
            $str .= $lead . "    Owner = " . $this->m_owner . "\n";
        }
        if ( $this->hasMMSI() ) {
            $str .= $lead . "    MMSI = " . $this->m_MMSI . "\n";
        }
        if ( $this->hasLRIT() ) {
            $str .= $lead . "    LRIT = " . $this->m_LRIT . "\n";
        }
        foreach($this->m_otherIds as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }
        foreach($this->m_otherNames as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }

        return $str;
    }
}
?>
