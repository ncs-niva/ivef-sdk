<?php

// 
//  VesselData
//
//  VesselData is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  VesselData is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by schema2code on Mon Jan 17 11:39:43 2022.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFConstruction.php";
require_once "IVEFIdentifier.php";

class VesselData { 

    var $m_construction; // default value is uninitialized
    var $m_constructionPresent;
    var $m_identifier; // default value is uninitialized
    var $m_identifierPresent;
    var $m_class; // default value is uninitialized
    var $m_classPresent;
    var $m_blackListed; // default value is uninitialized
    var $m_blackListedPresent;
    var $m_id; // default value is uninitialized
    var $m_idPresent;
    var $m_specialAttention; // default value is uninitialized
    var $m_specialAttentionPresent;
    var $m_sourceId; // default value is uninitialized
    var $m_sourceIdPresent;
    var $m_sourceName; // default value is uninitialized
    var $m_sourceNamePresent;
    var $m_sourceType; // default value is uninitialized
    var $m_sourceTypePresent;
    var $m_updateTime; // default value is uninitialized
    var $m_updateTimePresent;

    public function VesselData() {

        date_default_timezone_set('UTC');
        $this->m_constructionPresent = false;
        $this->m_construction = new Construction();
        $this->m_identifierPresent = false;
        $this->m_identifier = new Identifier();
        $this->m_classPresent = false;
        $this->m_blackListedPresent = false;
        $this->m_idPresent = false;
        $this->m_specialAttentionPresent = false;
        $this->m_sourceIdPresent = false;
        $this->m_sourceNamePresent = false;
        $this->m_sourceTypePresent = false;
        $this->m_updateTimePresent = false;
    }

    public function setConstruction( $val ) {

        $this->m_constructionPresent = true;
        $this->m_construction = $val;
        return true;
    }

    public function getConstruction() {

        return $this->m_construction;
    }

    public function hasConstruction() {

        return $this->m_constructionPresent;
    }

    public function setIdentifier( $val ) {

        $this->m_identifierPresent = true;
        $this->m_identifier = $val;
        return true;
    }

    public function getIdentifier() {

        return $this->m_identifier;
    }

    public function hasIdentifier() {

        return $this->m_identifierPresent;
    }

    public function setClass( $val ) {

        if ( ( $val != 0 ) &&
             ( $val != 1 ) &&
             ( $val != 2 ) )
            return false;
        $this->m_classPresent = true;
        $this->m_class = $val;
        return true;
    }

    public function getClass() {

        return $this->m_class;
    }

    public function hasClass() {

        return $this->m_classPresent;
    }

    public function setBlackListed( $val ) {

        $this->m_blackListedPresent = true;
        $this->m_blackListed = $val;
        return true;
    }

    public function getBlackListed() {

        return $this->m_blackListed;
    }

    public function hasBlackListed() {

        return $this->m_blackListedPresent;
    }

    public function setId( $val ) {

        $this->m_idPresent = true;
        $this->m_id = $val;
        return true;
    }

    public function getId() {

        return $this->m_id;
    }

    public function setSpecialAttention( $val ) {

        if (strlen ($val) > 20)
            return false;
        $this->m_specialAttentionPresent = true;
        $this->m_specialAttention = $val;
        return true;
    }

    public function getSpecialAttention() {

        return $this->m_specialAttention;
    }

    public function hasSpecialAttention() {

        return $this->m_specialAttentionPresent;
    }

    public function setSourceId( $val ) {

        if (strlen ($val) < 5)
            return false;
        if (strlen ($val) > 15)
            return false;
        $this->m_sourceIdPresent = true;
        $this->m_sourceId = $val;
        return true;
    }

    public function getSourceId() {

        return $this->m_sourceId;
    }

    public function hasSourceId() {

        return $this->m_sourceIdPresent;
    }

    public function setSourceName( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_sourceNamePresent = true;
        $this->m_sourceName = $val;
        return true;
    }

    public function getSourceName() {

        return $this->m_sourceName;
    }

    public function setSourceType( $val ) {

        if ( ( $val != 1 ) &&
             ( $val != 2 ) &&
             ( $val != 3 ) &&
             ( $val != 4 ) &&
             ( $val != 5 ) )
            return false;
        $this->m_sourceTypePresent = true;
        $this->m_sourceType = $val;
        return true;
    }

    public function getSourceType() {

        return $this->m_sourceType;
    }

    public function setUpdateTime( $val ) {

        $this->m_updateTimePresent = true;
        $this->m_updateTime = $val;
        return true;
    }

    public function getUpdateTime() {

        return $this->m_updateTime;
    }

    public function toXML($outputNamespace = true) {

        if ($outputNamespace)
        {
            $rootNodeTag  = "<VesselData";
            $rootNodeTag .= " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"";
            $rootNodeTag .= " xmlns=\"http://www.iala-to-be-confirmed.org/XMLSchema/IVEF/0.2.5\"";
            $rootNodeTag .= "></VesselData>";
        }
        else
            $rootNodeTag = "<VesselData></VesselData>";
        $xml = new SimpleXMLElement($rootNodeTag);

        if ( $this->hasClass() ) {
            $xml->addAttribute('Class', $this->m_class);
        }
        if ( $this->hasBlackListed() ) {
            $xml->addAttribute('BlackListed', $this->m_blackListed);
        }
        if ( $this->m_idPresent ) {
            $xml->addAttribute('Id', $this->m_id);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasSpecialAttention() ) {
            $xml->addAttribute('SpecialAttention', $this->m_specialAttention);
        }
        if ( $this->hasSourceId() ) {
            $xml->addAttribute('SourceId', $this->m_sourceId);
        }
        if ( $this->m_sourceNamePresent ) {
            $xml->addAttribute('SourceName', $this->m_sourceName);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_sourceTypePresent ) {
            $xml->addAttribute('SourceType', $this->m_sourceType);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_updateTimePresent ) {
            $xml->addAttribute('UpdateTime', $this->m_updateTime);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasConstruction() ) {
            $dom = dom_import_simplexml($xml);
            $child_as_xml = $this->m_construction->toXML(false);
            $child_as_simplexml = new SimpleXMLElement($child_as_xml);
            $child_as_dom = dom_import_simplexml($child_as_simplexml);
            $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
            $dom->appendChild($child_as_leaf);
            $xml = simplexml_import_dom($dom);
        } 
        if ( $this->hasIdentifier() ) {
            $dom = dom_import_simplexml($xml);
            $child_as_xml = $this->m_identifier->toXML(false);
            $child_as_simplexml = new SimpleXMLElement($child_as_xml);
            $child_as_dom = dom_import_simplexml($child_as_simplexml);
            $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
            $dom->appendChild($child_as_leaf);
            $xml = simplexml_import_dom($dom);
        } 
        return $xml->asXML();
    }

    public function toString() {

    	return $this->toStringWithLead("");
    }

    public function toStringWithLead( $lead ) {

        $str = $lead . "VesselData\n";

        if ( $this->hasClass() ) {
            $str .= $lead . "    Class = " . $this->m_class . "\n";
        }
        if ( $this->hasBlackListed() ) {
            $str .= $lead . "    BlackListed = " . $this->m_blackListed . "\n";
        }
        $str .= $lead . "    Id = " . $this->m_id . "\n";
        if ( $this->hasSpecialAttention() ) {
            $str .= $lead . "    SpecialAttention = " . $this->m_specialAttention . "\n";
        }
        if ( $this->hasSourceId() ) {
            $str .= $lead . "    SourceId = " . $this->m_sourceId . "\n";
        }
        $str .= $lead . "    SourceName = " . $this->m_sourceName . "\n";
        $str .= $lead . "    SourceType = " . $this->m_sourceType . "\n";
        $str .= $lead . "    UpdateTime = " . $this->m_updateTime . "\n";
        if ( $this->hasConstruction() ) {
            $str .=  $this->m_construction->toStringWithLead($lead . "    ") ;
        }
        if ( $this->hasIdentifier() ) {
            $str .=  $this->m_identifier->toStringWithLead($lead . "    ") ;
        }

        return $str;
    }
}
?>
