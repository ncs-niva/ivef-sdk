<?php

// 
//  Construction
//
//  Construction is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  Construction is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by schema2code on Mon Jan 17 11:39:43 2022.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFUnType.php";

class Construction { 

    var $m_unType; // default value is uninitialized
    var $m_unTypePresent;
    var $m_hullColor; // default value is uninitialized
    var $m_hullColorPresent;
    var $m_hullType; // default value is uninitialized
    var $m_hullTypePresent;
    var $m_deadWeight; // default value is uninitialized
    var $m_deadWeightPresent;
    var $m_grossWeight; // default value is uninitialized
    var $m_grossWeightPresent;
    var $m_length; // default value is uninitialized
    var $m_lengthPresent;
    var $m_lloydsShipType; // default value is uninitialized
    var $m_lloydsShipTypePresent;
    var $m_yearOfBuild; // default value is uninitialized
    var $m_yearOfBuildPresent;
    var $m_maxAirDraught; // default value is uninitialized
    var $m_maxAirDraughtPresent;
    var $m_maxDraught; // default value is uninitialized
    var $m_maxDraughtPresent;
    var $m_maxPersonsOnBoard; // default value is uninitialized
    var $m_maxPersonsOnBoardPresent;
    var $m_maxSpeed; // default value is uninitialized
    var $m_maxSpeedPresent;
    var $m_width; // default value is uninitialized
    var $m_widthPresent;

    public function Construction() {

        date_default_timezone_set('UTC');
        $this->m_unTypePresent = false;
        $this->m_unType = new UnType();
        $this->m_hullColorPresent = false;
        $this->m_hullTypePresent = false;
        $this->m_deadWeightPresent = false;
        $this->m_grossWeightPresent = false;
        $this->m_lengthPresent = false;
        $this->m_lloydsShipTypePresent = false;
        $this->m_yearOfBuildPresent = false;
        $this->m_maxAirDraughtPresent = false;
        $this->m_maxDraughtPresent = false;
        $this->m_maxPersonsOnBoardPresent = false;
        $this->m_maxSpeedPresent = false;
        $this->m_widthPresent = false;
    }

    public function setUnType( $val ) {

        $this->m_unTypePresent = true;
        $this->m_unType = $val;
        return true;
    }

    public function getUnType() {

        return $this->m_unType;
    }

    public function hasUnType() {

        return $this->m_unTypePresent;
    }

    public function setHullColor( $val ) {

        if (strlen ($val) < 6)
            return false;
        if (strlen ($val) > 6)
            return false;
        $this->m_hullColorPresent = true;
        $this->m_hullColor = $val;
        return true;
    }

    public function getHullColor() {

        return $this->m_hullColor;
    }

    public function hasHullColor() {

        return $this->m_hullColorPresent;
    }

    public function setHullType( $val ) {

        if ( ( $val != 1 ) &&
             ( $val != 2 ) &&
             ( $val != 3 ) )
            return false;
        $this->m_hullTypePresent = true;
        $this->m_hullType = $val;
        return true;
    }

    public function getHullType() {

        return $this->m_hullType;
    }

    public function hasHullType() {

        return $this->m_hullTypePresent;
    }

    public function setDeadWeight( $val ) {

        if ($val <= 0)
          return false;
        $this->m_deadWeightPresent = true;
        $this->m_deadWeight = $val;
        return true;
    }

    public function getDeadWeight() {

        return $this->m_deadWeight;
    }

    public function hasDeadWeight() {

        return $this->m_deadWeightPresent;
    }

    public function setGrossWeight( $val ) {

        if ($val <= 0)
          return false;
        $this->m_grossWeightPresent = true;
        $this->m_grossWeight = $val;
        return true;
    }

    public function getGrossWeight() {

        return $this->m_grossWeight;
    }

    public function hasGrossWeight() {

        return $this->m_grossWeightPresent;
    }

    public function setLength( $val ) {

        if ($val <= 0)
          return false;
        $this->m_lengthPresent = true;
        $this->m_length = $val;
        return true;
    }

    public function getLength() {

        return $this->m_length;
    }

    public function hasLength() {

        return $this->m_lengthPresent;
    }

    public function setLloydsShipType( $val ) {

        $this->m_lloydsShipTypePresent = true;
        $this->m_lloydsShipType = $val;
        return true;
    }

    public function getLloydsShipType() {

        return $this->m_lloydsShipType;
    }

    public function hasLloydsShipType() {

        return $this->m_lloydsShipTypePresent;
    }

    public function setYearOfBuild( $val ) {

        $this->m_yearOfBuildPresent = true;
        $this->m_yearOfBuild = $val;
        return true;
    }

    public function getYearOfBuild() {

        return $this->m_yearOfBuild;
    }

    public function hasYearOfBuild() {

        return $this->m_yearOfBuildPresent;
    }

    public function setMaxAirDraught( $val ) {

        if ($val <= 0)
          return false;
        $this->m_maxAirDraughtPresent = true;
        $this->m_maxAirDraught = $val;
        return true;
    }

    public function getMaxAirDraught() {

        return $this->m_maxAirDraught;
    }

    public function hasMaxAirDraught() {

        return $this->m_maxAirDraughtPresent;
    }

    public function setMaxDraught( $val ) {

        if ($val <= 0)
          return false;
        $this->m_maxDraughtPresent = true;
        $this->m_maxDraught = $val;
        return true;
    }

    public function getMaxDraught() {

        return $this->m_maxDraught;
    }

    public function hasMaxDraught() {

        return $this->m_maxDraughtPresent;
    }

    public function setMaxPersonsOnBoard( $val ) {

        if ($val <= 0)
          return false;
        $this->m_maxPersonsOnBoardPresent = true;
        $this->m_maxPersonsOnBoard = $val;
        return true;
    }

    public function getMaxPersonsOnBoard() {

        return $this->m_maxPersonsOnBoard;
    }

    public function hasMaxPersonsOnBoard() {

        return $this->m_maxPersonsOnBoardPresent;
    }

    public function setMaxSpeed( $val ) {

        if ($val <= 0)
          return false;
        $this->m_maxSpeedPresent = true;
        $this->m_maxSpeed = $val;
        return true;
    }

    public function getMaxSpeed() {

        return $this->m_maxSpeed;
    }

    public function hasMaxSpeed() {

        return $this->m_maxSpeedPresent;
    }

    public function setWidth( $val ) {

        if ($val <= 0)
          return false;
        $this->m_widthPresent = true;
        $this->m_width = $val;
        return true;
    }

    public function getWidth() {

        return $this->m_width;
    }

    public function hasWidth() {

        return $this->m_widthPresent;
    }

    public function toXML($outputNamespace = true) {

        if ($outputNamespace)
        {
            $rootNodeTag  = "<Construction";
            $rootNodeTag .= " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"";
            $rootNodeTag .= " xmlns=\"http://www.iala-to-be-confirmed.org/XMLSchema/IVEF/0.2.5\"";
            $rootNodeTag .= "></Construction>";
        }
        else
            $rootNodeTag = "<Construction></Construction>";
        $xml = new SimpleXMLElement($rootNodeTag);

        if ( $this->hasHullColor() ) {
            $xml->addAttribute('HullColor', $this->m_hullColor);
        }
        if ( $this->hasHullType() ) {
            $xml->addAttribute('HullType', $this->m_hullType);
        }
        if ( $this->hasDeadWeight() ) {
            $xml->addAttribute('DeadWeight', number_format($this->m_deadWeight, 6));
        }
        if ( $this->hasGrossWeight() ) {
            $xml->addAttribute('GrossWeight', number_format($this->m_grossWeight, 6));
        }
        if ( $this->hasLength() ) {
            $xml->addAttribute('Length', number_format($this->m_length, 6));
        }
        if ( $this->hasLloydsShipType() ) {
            $xml->addAttribute('LloydsShipType', $this->m_lloydsShipType);
        }
        if ( $this->hasYearOfBuild() ) {
            $xml->addAttribute('YearOfBuild', $this->m_yearOfBuild);
        }
        if ( $this->hasMaxAirDraught() ) {
            $xml->addAttribute('MaxAirDraught', number_format($this->m_maxAirDraught, 1));
        }
        if ( $this->hasMaxDraught() ) {
            $xml->addAttribute('MaxDraught', number_format($this->m_maxDraught, 1));
        }
        if ( $this->hasMaxPersonsOnBoard() ) {
            $xml->addAttribute('MaxPersonsOnBoard', $this->m_maxPersonsOnBoard);
        }
        if ( $this->hasMaxSpeed() ) {
            $xml->addAttribute('MaxSpeed', number_format($this->m_maxSpeed, 6));
        }
        if ( $this->hasWidth() ) {
            $xml->addAttribute('Width', number_format($this->m_width, 6));
        }
        if ( $this->hasUnType() ) {
            $dom = dom_import_simplexml($xml);
            $child_as_xml = $this->m_unType->toXML(false);
            $child_as_simplexml = new SimpleXMLElement($child_as_xml);
            $child_as_dom = dom_import_simplexml($child_as_simplexml);
            $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
            $dom->appendChild($child_as_leaf);
            $xml = simplexml_import_dom($dom);
        } 
        return $xml->asXML();
    }

    public function toString() {

    	return $this->toStringWithLead("");
    }

    public function toStringWithLead( $lead ) {

        $str = $lead . "Construction\n";

        if ( $this->hasHullColor() ) {
            $str .= $lead . "    HullColor = " . $this->m_hullColor . "\n";
        }
        if ( $this->hasHullType() ) {
            $str .= $lead . "    HullType = " . $this->m_hullType . "\n";
        }
        if ( $this->hasDeadWeight() ) {
            $str .= $lead . "    DeadWeight = " . number_format($this->m_deadWeight, 6) . "\n";
        }
        if ( $this->hasGrossWeight() ) {
            $str .= $lead . "    GrossWeight = " . number_format($this->m_grossWeight, 6) . "\n";
        }
        if ( $this->hasLength() ) {
            $str .= $lead . "    Length = " . number_format($this->m_length, 6) . "\n";
        }
        if ( $this->hasLloydsShipType() ) {
            $str .= $lead . "    LloydsShipType = " . $this->m_lloydsShipType . "\n";
        }
        if ( $this->hasYearOfBuild() ) {
            $str .= $lead . "    YearOfBuild = " . $this->m_yearOfBuild . "\n";
        }
        if ( $this->hasMaxAirDraught() ) {
            $str .= $lead . "    MaxAirDraught = " . number_format($this->m_maxAirDraught, 1) . "\n";
        }
        if ( $this->hasMaxDraught() ) {
            $str .= $lead . "    MaxDraught = " . number_format($this->m_maxDraught, 1) . "\n";
        }
        if ( $this->hasMaxPersonsOnBoard() ) {
            $str .= $lead . "    MaxPersonsOnBoard = " . $this->m_maxPersonsOnBoard . "\n";
        }
        if ( $this->hasMaxSpeed() ) {
            $str .= $lead . "    MaxSpeed = " . number_format($this->m_maxSpeed, 6) . "\n";
        }
        if ( $this->hasWidth() ) {
            $str .= $lead . "    Width = " . number_format($this->m_width, 6) . "\n";
        }
        if ( $this->hasUnType() ) {
            $str .=  $this->m_unType->toStringWithLead($lead . "    ") ;
        }

        return $str;
    }
}
?>
