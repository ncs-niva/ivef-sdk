<?php

// 
//  TrackData
//
//  TrackData is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  TrackData is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by schema2code on Mon Jan 17 11:39:43 2022.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFPos.php";
require_once "IVEFNavStatus.php";

class TrackData { 

    var $m_pos; // default value is uninitialized
    var $m_posPresent;
    var $m_navStatus; // default value is uninitialized
    var $m_navStatusPresent;
    var $m_COG; // default value is uninitialized
    var $m_COGPresent;
    var $m_estAccSOG; // default value is uninitialized
    var $m_estAccSOGPresent;
    var $m_estAccCOG; // default value is uninitialized
    var $m_estAccCOGPresent;
    var $m_id; // default value is uninitialized
    var $m_idPresent;
    var $m_length; // default value is uninitialized
    var $m_lengthPresent;
    var $m_heading; // default value is uninitialized
    var $m_headingPresent;
    var $m_ROT; // default value is uninitialized
    var $m_ROTPresent;
    var $m_SOG; // default value is uninitialized
    var $m_SOGPresent;
    var $m_sourceId; // default value is uninitialized
    var $m_sourceIdPresent;
    var $m_sourceName; // default value is uninitialized
    var $m_sourceNamePresent;
    var $m_updateTime; // default value is uninitialized
    var $m_updateTimePresent;
    var $m_trackStatus; // default value is uninitialized
    var $m_trackStatusPresent;
    var $m_width; // default value is uninitialized
    var $m_widthPresent;

    public function TrackData() {

        date_default_timezone_set('UTC');
        $this->m_posPresent = false;
        $this->m_poss = array();
        $this->m_navStatusPresent = false;
        $this->m_navStatuss = array();
        $this->m_COGPresent = false;
        $this->m_estAccSOGPresent = false;
        $this->m_estAccCOGPresent = false;
        $this->m_idPresent = false;
        $this->m_lengthPresent = false;
        $this->m_headingPresent = false;
        $this->m_ROTPresent = false;
        $this->m_SOGPresent = false;
        $this->m_sourceIdPresent = false;
        $this->m_sourceNamePresent = false;
        $this->m_updateTimePresent = false;
        $this->m_trackStatusPresent = false;
        $this->m_widthPresent = false;
    }

    public function removePos(Pos $val ) {
        if ( count($this->m_poss) <= 0) {
            return false; // scalar already at minOccurs
        }
        for($i=0; $i< count($this->m_poss); $i++) {
            if($this->m_poss[i] == $val) {
                unset($this->m_poss[i]);
            }
        }
        return true;
    }

    public function addPos(Pos $val ) {

        $this->m_poss[] = $val;
        return true;
    }

    public function getPosAt($i) {

        return $this->m_poss[$i];
    }

    public function countOfPoss() {

        return count($this->m_poss);
    }

    public function removeNavStatus(NavStatus $val ) {
        if ( count($this->m_navStatuss) <= 0) {
            return false; // scalar already at minOccurs
        }
        for($i=0; $i< count($this->m_navStatuss); $i++) {
            if($this->m_navStatuss[i] == $val) {
                unset($this->m_navStatuss[i]);
            }
        }
        return true;
    }

    public function addNavStatus(NavStatus $val ) {

        $this->m_navStatuss[] = $val;
        return true;
    }

    public function getNavStatusAt($i) {

        return $this->m_navStatuss[$i];
    }

    public function countOfNavStatuss() {

        return count($this->m_navStatuss);
    }

    public function setCOG( $val ) {

        if ($val < 0)
          return false;
        if ($val > 360)
          return false;
        $this->m_COGPresent = true;
        $this->m_COG = $val;
        return true;
    }

    public function getCOG() {

        return $this->m_COG;
    }

    public function setEstAccSOG( $val ) {

        $this->m_estAccSOGPresent = true;
        $this->m_estAccSOG = $val;
        return true;
    }

    public function getEstAccSOG() {

        return $this->m_estAccSOG;
    }

    public function hasEstAccSOG() {

        return $this->m_estAccSOGPresent;
    }

    public function setEstAccCOG( $val ) {

        $this->m_estAccCOGPresent = true;
        $this->m_estAccCOG = $val;
        return true;
    }

    public function getEstAccCOG() {

        return $this->m_estAccCOG;
    }

    public function hasEstAccCOG() {

        return $this->m_estAccCOGPresent;
    }

    public function setId( $val ) {

        $this->m_idPresent = true;
        $this->m_id = $val;
        return true;
    }

    public function getId() {

        return $this->m_id;
    }

    public function setLength( $val ) {

        if ($val <= 0)
          return false;
        $this->m_lengthPresent = true;
        $this->m_length = $val;
        return true;
    }

    public function getLength() {

        return $this->m_length;
    }

    public function hasLength() {

        return $this->m_lengthPresent;
    }

    public function setHeading( $val ) {

        if ($val < 0)
          return false;
        if ($val > 360)
          return false;
        $this->m_headingPresent = true;
        $this->m_heading = $val;
        return true;
    }

    public function getHeading() {

        return $this->m_heading;
    }

    public function hasHeading() {

        return $this->m_headingPresent;
    }

    public function setROT( $val ) {

        if ($val <= -720)
          return false;
        if ($val > 720)
          return false;
        $this->m_ROTPresent = true;
        $this->m_ROT = $val;
        return true;
    }

    public function getROT() {

        return $this->m_ROT;
    }

    public function hasROT() {

        return $this->m_ROTPresent;
    }

    public function setSOG( $val ) {

        if ($val < 0)
          return false;
        $this->m_SOGPresent = true;
        $this->m_SOG = $val;
        return true;
    }

    public function getSOG() {

        return $this->m_SOG;
    }

    public function setSourceId( $val ) {

        if (strlen ($val) < 5)
            return false;
        if (strlen ($val) > 15)
            return false;
        $this->m_sourceIdPresent = true;
        $this->m_sourceId = $val;
        return true;
    }

    public function getSourceId() {

        return $this->m_sourceId;
    }

    public function hasSourceId() {

        return $this->m_sourceIdPresent;
    }

    public function setSourceName( $val ) {

        if (strlen ($val) < 1)
            return false;
        if (strlen ($val) > 42)
            return false;
        $this->m_sourceNamePresent = true;
        $this->m_sourceName = $val;
        return true;
    }

    public function getSourceName() {

        return $this->m_sourceName;
    }

    public function setUpdateTime( $val ) {

        $this->m_updateTimePresent = true;
        $this->m_updateTime = $val;
        return true;
    }

    public function getUpdateTime() {

        return $this->m_updateTime;
    }

    public function setTrackStatus( $val ) {

        if ( ( $val != 1 ) &&
             ( $val != 2 ) &&
             ( $val != 3 ) )
            return false;
        $this->m_trackStatusPresent = true;
        $this->m_trackStatus = $val;
        return true;
    }

    public function getTrackStatus() {

        return $this->m_trackStatus;
    }

    public function setWidth( $val ) {

        if ($val <= 0)
          return false;
        $this->m_widthPresent = true;
        $this->m_width = $val;
        return true;
    }

    public function getWidth() {

        return $this->m_width;
    }

    public function hasWidth() {

        return $this->m_widthPresent;
    }

    public function toXML($outputNamespace = true) {

        if ($outputNamespace)
        {
            $rootNodeTag  = "<TrackData";
            $rootNodeTag .= " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"";
            $rootNodeTag .= " xmlns=\"http://www.iala-to-be-confirmed.org/XMLSchema/IVEF/0.2.5\"";
            $rootNodeTag .= "></TrackData>";
        }
        else
            $rootNodeTag = "<TrackData></TrackData>";
        $xml = new SimpleXMLElement($rootNodeTag);

        if ( $this->m_COGPresent ) {
            $xml->addAttribute('COG', number_format($this->m_COG, 1));
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasEstAccSOG() ) {
            $xml->addAttribute('EstAccSOG', number_format($this->m_estAccSOG, 6));
        }
        if ( $this->hasEstAccCOG() ) {
            $xml->addAttribute('EstAccCOG', number_format($this->m_estAccCOG, 6));
        }
        if ( $this->m_idPresent ) {
            $xml->addAttribute('Id', $this->m_id);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasLength() ) {
            $xml->addAttribute('Length', number_format($this->m_length, 6));
        }
        if ( $this->hasHeading() ) {
            $xml->addAttribute('Heading', number_format($this->m_heading, 6));
        }
        if ( $this->hasROT() ) {
            $xml->addAttribute('ROT', number_format($this->m_ROT, 1));
        }
        if ( $this->m_SOGPresent ) {
            $xml->addAttribute('SOG', number_format($this->m_SOG, 1));
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasSourceId() ) {
            $xml->addAttribute('SourceId', $this->m_sourceId);
        }
        if ( $this->m_sourceNamePresent ) {
            $xml->addAttribute('SourceName', $this->m_sourceName);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_updateTimePresent ) {
            $xml->addAttribute('UpdateTime', $this->m_updateTime);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_trackStatusPresent ) {
            $xml->addAttribute('TrackStatus', $this->m_trackStatus);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasWidth() ) {
            $xml->addAttribute('Width', number_format($this->m_width, 6));
        }
        if ( count($this->m_poss) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_poss as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML(false);
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        if ( count($this->m_navStatuss) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_navStatuss as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML(false);
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        return $xml->asXML();
    }

    public function toString() {

    	return $this->toStringWithLead("");
    }

    public function toStringWithLead( $lead ) {

        $str = $lead . "TrackData\n";

        $str .= $lead . "    COG = " . number_format($this->m_COG, 1) . "\n";
        if ( $this->hasEstAccSOG() ) {
            $str .= $lead . "    EstAccSOG = " . number_format($this->m_estAccSOG, 6) . "\n";
        }
        if ( $this->hasEstAccCOG() ) {
            $str .= $lead . "    EstAccCOG = " . number_format($this->m_estAccCOG, 6) . "\n";
        }
        $str .= $lead . "    Id = " . $this->m_id . "\n";
        if ( $this->hasLength() ) {
            $str .= $lead . "    Length = " . number_format($this->m_length, 6) . "\n";
        }
        if ( $this->hasHeading() ) {
            $str .= $lead . "    Heading = " . number_format($this->m_heading, 6) . "\n";
        }
        if ( $this->hasROT() ) {
            $str .= $lead . "    ROT = " . number_format($this->m_ROT, 1) . "\n";
        }
        $str .= $lead . "    SOG = " . number_format($this->m_SOG, 1) . "\n";
        if ( $this->hasSourceId() ) {
            $str .= $lead . "    SourceId = " . $this->m_sourceId . "\n";
        }
        $str .= $lead . "    SourceName = " . $this->m_sourceName . "\n";
        $str .= $lead . "    UpdateTime = " . $this->m_updateTime . "\n";
        $str .= $lead . "    TrackStatus = " . $this->m_trackStatus . "\n";
        if ( $this->hasWidth() ) {
            $str .= $lead . "    Width = " . number_format($this->m_width, 6) . "\n";
        }
        foreach($this->m_poss as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }
        foreach($this->m_navStatuss as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }

        return $str;
    }
}
?>
