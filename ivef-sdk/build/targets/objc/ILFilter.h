/* 
 *  ILFilter
 *
 *  ILFilter is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by schema2code on Mon Jan 17 11:39:43 2022.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#import <Foundation/Foundation.h>

//-----------------------------------------------------------
//! \brief       Class definition of ILFilter
//!
//! 
//!

@interface ILFilter : NSObject { 
    NSString *m_predicate;
    BOOL m_predicatePresent;
}


/* Predicate:
   Filter expression in XPath 1.0 definition (http://www.w3.org/TR/1999/REC-xpath-19991116) 
   A Filter must start with //ObjectData (Filter always on entire objects) and can not go beyond a single objects parameters (next/previous/last etc.) 
   
   Examples:
   
   All objects: //ObjectData
   All objects faster then 10 m/s: //ObjectData[TrackData[@SOG > 10]]
   All objects named "Krieken": //ObjectData[VesselData/Identifier[@Name = "Krieken"]]
   All objects heading for Antwerp, HANSADOK 497 with a max keelheigth of 20m: //ObjectData[VoyageData[@DestCode = BEANR0170100497]]  AND //ObjectData[VesselData/Construction[@MaxKeelHeigth > 20]] */
//!Setter for Predicate
//!
-(BOOL) setPredicate:(NSString *) val;
//!Getter for Predicate
//!
-(NSString *) predicate;
//!Set attributes by providing a key/value dictionary
//!

-(BOOL) setAttributes:(NSDictionary *)attributeDict;
//!Get attributes as a key/value dictionary
//!
-(NSDictionary *) attributes;
//!Get a XML representation of this class
//!returns nil if not all required fields are set
//!
-(NSString *) XML;
//!Get a string representation of this class
//!
-(NSString *) stringValue;
-(NSString *) stringValueWithLead:(NSString *) lead;
//!Helper routine to encode any string to an XML escaped string
//!
-(NSString *) encode: (NSString *) input;

@end



