/* 
 *  OtherId
 *
 *  OtherId is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by schema2code on Mon Jan 17 11:39:43 2022.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __OTHERID_H__
#define __OTHERID_H__

#include <QObject>
#include <QString>
#include <QDateTime>

class XmlStreamReader;

namespace ivef {

//-----------------------------------------------------------
//! \brief       Class definition of OtherId
//!
//! Other Id's for the track than the world wide international standard Identifiers, e.g. regional indentifiers like ENI
//!
class OtherId : public QObject { 
    Q_OBJECT

public:
    //! constructor
    //!
    OtherId();
    //! constructor for parser function
    //!
    OtherId(XmlStreamReader&);
    //! copy constructor
    //!
    OtherId(const OtherId&);
    //! = operator
    //!
    OtherId & operator=(const OtherId& val);
    //! == operator
    //!
    bool operator==(const OtherId& val);
    //! sets the Id: Name of the Identifier
    //!
    bool setId(QString val);

    //! gets the Id: Name of the Identifier
    //!
    //! \return     QString
    //!
    QString getId() const;

    //! sets the Value: Value of the identifier
    //!
    bool setValue(QString val);

    //! gets the Value: Value of the identifier
    //!
    //! \return     QString
    //!
    QString getValue() const;

    //! generates XML of this object including attributes and child elements
    //! returns QString::null if not all required elements are available
    //! If null returned check lastError() for problem description
    //!
    //! \return     QString
    const QString& toXML(bool outputNamespace = true);

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString() const;

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead) const;

    //! return last error found in toXML function
    //!
    //! \return     QString
    const QString& lastError() const;

    //! return changed 
    //!
    //! \return     bool
    const bool& changed() const;

    //! return store 
    //!
    //! \return     QString
    const QString& store() const;


private:
    QString m_id;
    bool m_idPresent;
    QString m_value;
    bool m_valuePresent;
    QString m_lastError; 
    bool m_changed; 
    QString m_store;
}; 
} //end ns

#endif
