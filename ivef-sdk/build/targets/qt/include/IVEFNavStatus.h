/* 
 *  NavStatus
 *
 *  NavStatus is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by schema2code on Mon Jan 17 11:39:43 2022.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __NAVSTATUS_H__
#define __NAVSTATUS_H__

#include <QObject>
#include <QString>
#include <QDateTime>

class XmlStreamReader;

namespace ivef {

//-----------------------------------------------------------
//! \brief       Class definition of NavStatus
//!
//! 
//!
class NavStatus : public QObject { 
    Q_OBJECT

public:
    //! constructor
    //!
    NavStatus();
    //! constructor for parser function
    //!
    NavStatus(XmlStreamReader&);
    //! copy constructor
    //!
    NavStatus(const NavStatus&);
    //! = operator
    //!
    NavStatus & operator=(const NavStatus& val);
    //! == operator
    //!
    bool operator==(const NavStatus& val);
    //! sets the Value: Navigation status of the target\n
    //! 								0 = under way using engine\n
    //! 								1 = at anchor\n
    //! 								2 = not under command\n
    //! 								3 = restricted manoeuvrability\n
    //! 								4 = constrained by her draught\n
    //! 								5 = moored\n
    //! 								6 = aground\n
    //! 								7 = engaged in fishing\n
    //! 								8 = under way sailing\n
    //! 								9 = engaged in fishing other than trawling  \n
    //! 								10 = air-cushion vessel in non displacement mode or WIG craft taking off, landing or in flight\n
    //! 								11 = power driven vessel towing astern\n
    //! 								12 = power driven vessel pushing ahead or towing alongside\n
    //! 								13 = in distress or requiring assistance  \n
    //! 								14 = AIS SART, seeking to attract attention\n
    //! 								15 = undefined default
    //!
    bool setValue(int val);

    //! gets the Value: Navigation status of the target\n
    //! 								0 = under way using engine\n
    //! 								1 = at anchor\n
    //! 								2 = not under command\n
    //! 								3 = restricted manoeuvrability\n
    //! 								4 = constrained by her draught\n
    //! 								5 = moored\n
    //! 								6 = aground\n
    //! 								7 = engaged in fishing\n
    //! 								8 = under way sailing\n
    //! 								9 = engaged in fishing other than trawling  \n
    //! 								10 = air-cushion vessel in non displacement mode or WIG craft taking off, landing or in flight\n
    //! 								11 = power driven vessel towing astern\n
    //! 								12 = power driven vessel pushing ahead or towing alongside\n
    //! 								13 = in distress or requiring assistance  \n
    //! 								14 = AIS SART, seeking to attract attention\n
    //! 								15 = undefined default
    //!
    //! \return     int
    //!
    int getValue() const;

    //! generates XML of this object including attributes and child elements
    //! returns QString::null if not all required elements are available
    //! If null returned check lastError() for problem description
    //!
    //! \return     QString
    const QString& toXML(bool outputNamespace = true);

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString() const;

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead) const;

    //! return last error found in toXML function
    //!
    //! \return     QString
    const QString& lastError() const;

    //! return changed 
    //!
    //! \return     bool
    const bool& changed() const;

    //! return store 
    //!
    //! \return     QString
    const QString& store() const;


private:
    int m_value;
    bool m_valuePresent;
    QString m_lastError; 
    bool m_changed; 
    QString m_store;
}; 
} //end ns

#endif
